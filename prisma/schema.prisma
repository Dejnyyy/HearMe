//schema.prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
    // url = "mysql://dejny:x4Qt4es125uz@db.bagros.eu:8100/dejnytest"
  relationMode = "prisma"
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
//!!!!!!!!!!!NESAHAT!!!!!!!!!!!!!!
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    registered_at     DateTime @default(now())
    id_token          String?  @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String? 
    favoriteAlbum String?   // field for favorite album
    favAlbImg     String?   // field for favorite album image
    favoriteArtist String?  // field for favorite artist
    favArtImg     String?   // field for favorite artist image
    isAdmin       Boolean   @default(false)
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    votes     Vote[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
model Vote {
  id          Int      @id @default(autoincrement())
  userId      String      // foreign key
  user        User     @relation(fields: [userId], references: [id])
  song        String   // Nazev songy
  voteType    String   // Typ hlasu (+ nebo -)
  artist      String   // Jmeno umelce
  imageUrl    String?
  createdAt   DateTime @default(now())
}